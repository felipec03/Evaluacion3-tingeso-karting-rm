version: "3.8"
services:
  postgres:
    container_name: karting-postgres-container
    image: postgres
    deploy:
      restart_policy:
        condition: on-failure
    volumes:
      - karting-postgres-volume:/var/lib/postgresql/data
    networks:
      - backend-network
    environment:      
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres     # <-- Explicitly set the user
      POSTGRES_DB: postgres       # <-- Explicitly set the database
    ports:
      - 5435:5432 
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    
  # Frontend services
  frontend1:
    image: felipec03/karting-frontend:latest
    networks:
      - frontend-network
  frontend2:
    image: felipec03/karting-frontend:latest
    networks:
      - frontend-network
  frontend3:
    image: felipec03/karting-frontend:latest
    networks:
      - frontend-network

  # Backend services
  backend1:
    image: felipec03/karting-backend:latest
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres   # <-- Match Spring's ${DB_USERNAME}
      DB_PASSWORD: postgres   # <-- Match Spring's ${DB_PASSWORD}
    networks:
      - backend-network
    deploy:
      restart_policy:
        condition: on-failure
    depends_on:
      postgres:
        condition: service_healthy

  backend2:
    image: felipec03/karting-backend:latest
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres   # <-- Match Spring's ${DB_USERNAME}
      DB_PASSWORD: postgres   # <-- Match Spring's ${DB_PASSWORD}
    networks:
      - backend-network
    deploy:
      restart_policy:
        condition: on-failure
    depends_on:
      postgres:
        condition: service_healthy

  backend3:
    image: felipec03/karting-backend:latest
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
    networks:
      - backend-network
    deploy:
      restart_policy:
        condition: on-failure
    depends_on:
      postgres:
        condition: service_healthy

  # Nginx for frontend load balancing
  nginx-frontend:
    image: nginx:latest
    ports:
      - "3000:80"
    volumes:
      - ./nginx-frontend.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend1
      - frontend2
      - frontend3
    networks:
      - frontend-network

  # Nginx for backend load balancing
  nginx-backend:
    image: nginx:latest
    ports:
      - "8090:8090"
    volumes:
      - ./nginx-backend.conf:/etc/nginx/nginx.conf
    depends_on:
      - backend1
      - backend2
      - backend3
    networks:
      - backend-network
volumes:
  karting-postgres-volume:
networks:
  frontend-network:
  backend-network:
