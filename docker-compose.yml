services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: postgres-karting
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - karting-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
  # SonarQube
  sonarqube:
    image: sonarqube:community
    container_name: sonarqube-karting
    restart: always
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
      - SONAR_JDBC_URL=jdbc:postgresql://postgres:5432/sonarqube
      - SONAR_JDBC_USERNAME=postgres
      - SONAR_JDBC_PASSWORD=postgres
    ports:
      - "9000:9000"
    volumes:
      - sonarqube-data:/opt/sonarqube/data
      - sonarqube-logs:/opt/sonarqube/logs
      - sonarqube-extensions:/opt/sonarqube/extensions
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - karting-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/api/system/status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  # Backend Services (3 instances)
  backend-1:
    image: felipec03/evaluacion3backend:latest
    build: 
      context: ./backend
    container_name: backend-1
    environment:
      - DB_HOST=postgres
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - SERVER_PORT=8090
      # Remove SPRING_SQL_INIT_MODE to let application.properties handle it
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - karting-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/api/usuarios/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  backend-2:
    image: felipec03/evaluacion3backend:latest
    container_name: backend-2
    environment:
      - DB_HOST=postgres
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - SERVER_PORT=8090
      - SPRING_SQL_INIT_MODE=never
      - SPRING_JPA_HIBERNATE_DDL_AUTO=none
    depends_on:
      backend-1:
        condition: service_healthy
    networks:
      - karting-network

  backend-3:
    image: felipec03/evaluacion3backend:latest
    container_name: backend-3
    environment:
      - DB_HOST=postgres
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - SERVER_PORT=8090
      - SPRING_SQL_INIT_MODE=never
      - SPRING_JPA_HIBERNATE_DDL_AUTO=none
    depends_on:
      backend-1:
        condition: service_healthy
    networks:
      - karting-network

  # Frontend
  frontend:
    image: felipec03/evaluacion3frontend:latest
    build:
      context: ./frontend
    container_name: frontend
    restart: always
    networks:
      - karting-network

  # Frontend and API Gateway
  nginx:
    image: nginx:stable-alpine
    container_name: nginx-gateway
    restart: always
    ports:
      - "80:80"
    volumes:
      - ./nginx/backend.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - frontend
      - backend-1
      - backend-2
      - backend-3
    networks:
      - karting-network

  sonar-scanner-backend:
    image: sonarsource/sonar-scanner-cli:latest
    container_name: sonar-scanner-backend
    environment:
      - SONAR_HOST_URL=http://sonarqube:9000
      - SONAR_SCANNER_OPTS=-Xmx512m
    volumes:
      - ./backend:/usr/src
    working_dir: /usr/src
    depends_on:
      sonarqube:
        condition: service_healthy
    networks:
      - karting-network
    profiles:
      - analysis

networks:
  karting-network:
    driver: bridge

volumes:
  postgres-data:
  sonarqube-data:
  sonarqube-logs:
  sonarqube-extensions: